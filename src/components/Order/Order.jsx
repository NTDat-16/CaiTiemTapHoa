import { useState, useEffect } from "react";
import "./Order.css";

// D·ªØ li·ªáu gi·∫£ l·∫≠p s·∫£n ph·∫©m
const mockProducts = [
    { product_id: 1, product_name: "N∆∞·ªõc su·ªëi Aquafina 500ml", barcode: "8938505970025", price: 5000, unit: "chai", type: "do-uong" },
    { product_id: 2, product_name: "B√°nh m√¨ sandwich", barcode: "8934567823912", price: 15000, unit: "·ªï", type: "thuc-pham" },
    { product_id: 3, product_name: "Coca-Cola lon 330ml", barcode: "8934823912345", price: 10000, unit: "lon", type: "do-uong" },
    { product_id: 4, product_name: "K·∫πo cao su Doublemint", barcode: "8935049510011", price: 3000, unit: "g√≥i", type: "thuc-pham" },
    { product_id: 5, product_name: "Bia Saigon", barcode: "8935049510022", price: 18000, unit: "lon", type: "do-uong" },
    { product_id: 6, product_name: "M√¨ g√≥i H·∫£o H·∫£o", barcode: "8935049510033", price: 4000, unit: "g√≥i", type: "thuc-pham" },
    { product_id: 7, product_name: "S·ªØa t∆∞∆°i Vinamilk", barcode: "8935049510044", price: 7000, unit: "h·ªôp", type: "do-uong" },
    { product_id: 8, product_name: "Khoai t√¢y chi√™n", barcode: "8935049510055", price: 20000, unit: "t√∫i", type: "thuc-pham" },
    { product_id: 9, product_name: "N∆∞·ªõc tƒÉng l·ª±c Redbull", barcode: "8935049510066", price: 12000, unit: "lon", type: "do-uong" },
    { product_id: 10, product_name: "B√°nh b√¥ng lan", barcode: "8935049510077", price: 25000, unit: "c√°i", type: "thuc-pham" },
    { product_id: 11, product_name: "Gia v·ªã", barcode: "8935049510088", price: 15000, unit: "h·ªôp", type: "gia-dung" },
    { product_id: 12, product_name: "KhƒÉn gi·∫•y", barcode: "8935049510099", price: 10000, unit: "g√≥i", type: "gia-dung" },
];

// D·ªØ li·ªáu gi·∫£ l·∫≠p cho Khuy·∫øn m√£i
const mockPromotions = [
    { promo_id: 1, promo_code: 'KM10', discount_type: 'percent', discount_value: 10, name: 'Gi·∫£m 10%' },
    { promo_id: 2, promo_code: 'FREESHIP', discount_type: 'amount', discount_value: 20000, name: 'Gi·∫£m 20K' },
];

// D·ªØ li·ªáu gi·∫£ l·∫≠p cho Nh√¢n vi√™n/Kh√°ch h√†ng (T√πy ch·ªçn)
const mockUsers = [{ user_id: 1, name: "Nguy·ªÖn VƒÉn A" }];
const mockCustomers = [{ customer_id: 1, phone: "0901234567", name: "Tr·∫ßn Th·ªã B" }];


export default function Order() {
    const [category, setCategory] = useState("all");
    const [cart, setCart] = useState([]);
    const [search, setSearch] = useState("");
    const [loading, setLoading] = useState(true); // Th√™m state loading

    // States cho d·ªØ li·ªáu t·ª´ API gi·∫£ l·∫≠p
    const [products, setProducts] = useState([]);
    const [promotions, setPromotions] = useState([]);
    const [users, setUsers] = useState([]);
    const [customers, setCustomers] = useState([]);

    // States cho ph√¢n trang
    const [currentPage, setCurrentPage] = useState(1);
    const productsPerPage = 8; // S·ªë s·∫£n ph·∫©m tr√™n m·ªói trang

    // ‚úÖ H√†m gi·∫£ l·∫≠p g·ªçi API ƒë·ªÉ t·∫£i t·∫•t c·∫£ d·ªØ li·ªáu c·∫ßn thi·∫øt
    const fetchData = async () => {
        setLoading(true);
        console.log("ƒêang gi·∫£ l·∫≠p g·ªçi API...");
        // M√¥ ph·ªèng ƒë·ªô tr·ªÖ
        await new Promise(resolve => setTimeout(resolve, 800));

        // ‚õîÔ∏è CH·ªñ N√ÄY S·∫º ƒê∆Ø·ª¢C THAY TH·∫æ B·∫∞NG L·ªÜNH G·ªåI API TH·∫¨T
        setProducts(mockProducts);
        setPromotions(mockPromotions);
        setUsers(mockUsers);
        setCustomers(mockCustomers);
        // -----------------------------------------------------

        setLoading(false);
        console.log("Ho√†n th√†nh gi·∫£ l·∫≠p g·ªçi API.");
    };

    useEffect(() => {
        fetchData();
    }, []);

    // 1. L·ªçc s·∫£n ph·∫©m theo lo·∫°i v√† t√¨m ki·∫øm
    const filteredProducts = products.filter((p) => {
        const matchCategory = category === "all" || p.type === category;
        const matchSearch = p.product_name.toLowerCase().includes(search.toLowerCase());
        return matchCategory && matchSearch;
    });

    // 2. Logic Ph√¢n trang
    const indexOfLastProduct = currentPage * productsPerPage;
    const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
    const currentProducts = filteredProducts.slice(indexOfFirstProduct, indexOfLastProduct);
    const totalPages = Math.ceil(filteredProducts.length / productsPerPage);

    const paginate = (pageNumber) => setCurrentPage(pageNumber);

    // X·ª≠ l√Ω khi b·ªô l·ªçc thay ƒë·ªïi, reset v·ªÅ trang 1
    useEffect(() => {
        setCurrentPage(1);
    }, [category, search]);


    // ‚úÖ C√°c h√†m qu·∫£n l√Ω gi·ªè h√†ng (gi·ªØ nguy√™n)
    const handleAddToCart = (product) => {
        setCart((prev) => {
            const existing = prev.find((item) => item.product_id === product.product_id);
            if (existing) {
                return prev.map((item) =>
                    item.product_id === product.product_id
                        ? { ...item, quantity: item.quantity + 1 }
                        : item
                );
            } else {
                return [...prev, { ...product, quantity: 1 }];
            }
        });
    };

    const updateQuantity = (id, delta) => {
        setCart((prev) =>
            prev
                .map((item) =>
                    item.product_id === id
                        ? { ...item, quantity: Math.max(item.quantity + delta, 0) }
                        : item
                )
                .filter((item) => item.quantity > 0)
        );
    };

    const removeFromCart = (id) => {
        setCart((prev) => prev.filter((item) => item.product_id !== id));
    };

    // ‚úÖ T√≠nh to√°n t·ªïng ti·ªÅn (gi·∫£ ƒë·ªãnh ch∆∞a √°p d·ª•ng KM)
    const subtotal = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const discountAmount = 0; // T·∫°m th·ªùi ƒë·ªÉ 0
    const total = subtotal - discountAmount;

    // Hi·ªÉn th·ªã m√†n h√¨nh loading
    if (loading) {
        return <div className="loading-screen">ƒêang t·∫£i d·ªØ li·ªáu...</div>;
    }

    return (
        <div className="order-page">
            <header className="order-header">
                <h1>ƒê·∫∑t h√†ng t·∫°i qu·∫ßy</h1>
                <input
                    type="text"
                    placeholder="T√¨m s·∫£n ph·∫©m theo t√™n..."
                    value={search}
                    onChange={(e) => setSearch(e.target.value)}
                />
            </header>

            <main className="order-main">
                {/* C·ªôt b√™n tr√°i: Gi·ªè h√†ng */}
                <section className="order-left">
                    <div>
                        <div className="input-group">
                            <label>Nh√¢n vi√™n (user_id)</label>
                            <select disabled value={users[0]?.user_id}>
                                {users.map(u => <option key={u.user_id} value={u.user_id}>{u.name}</option>)}
                            </select>
                        </div>

                        <div className="input-group">
                            <label>Kh√°ch h√†ng (customer_id)</label>
                            <input type="text" placeholder="Nh·∫≠p SƒêT ho·∫∑c t√™n kh√°ch h√†ng" />
                        </div>

                        <div className="input-group">
                            <label>M√£ Khuy·∫øn m√£i (promo_id)</label>
                            <select>
                                <option value="">Kh√¥ng √°p d·ª•ng</option>
                                {promotions.map(promo => (
                                    <option key={promo.promo_id} value={promo.promo_id}>
                                        {promo.promo_code}
                                    </option>
                                ))}
                            </select>
                        </div>


                        <div className="product-list">
                            <h2>üõí Gi·ªè h√†ng ({cart.length} m√≥n)</h2>
                            <div className="product-box">
                                {cart.length === 0 ? (
                                    <p className="empty-cart-message">Ch∆∞a c√≥ s·∫£n ph·∫©m</p>
                                ) : (
                                    cart.map((item) => (
                                        <div key={item.product_id} className="cart-item">
                                            <div className="cart-info">
                                                <strong>{item.product_name}</strong>
                                                <p>
                                                    {item.price.toLocaleString()} ‚Ç´ √ó {item.quantity} ={" "}
                                                    <span className="text-total">
                                                        {(item.price * item.quantity).toLocaleString()} ‚Ç´
                                                    </span>
                                                </p>
                                            </div>
                                            <div className="cart-actions">
                                                <button onClick={() => updateQuantity(item.product_id, -1)}>-</button>
                                                <span>{item.quantity}</span>
                                                <button onClick={() => updateQuantity(item.product_id, +1)}>+</button>
                                                <button className="delete-btn" onClick={() => removeFromCart(item.product_id)}>X</button>
                                            </div>
                                        </div>
                                    ))
                                )}
                            </div>
                        </div>
                    </div>

                    {/* Thanh to√°n */}
                    <div className="payment-section">
                        <div className="payment-summary">
                            <div className="summary-row">
                                <span>T·ªïng ph·ª•:</span>
                                <span>{subtotal.toLocaleString()} ‚Ç´</span>
                            </div>
                            <div className="summary-row discount-row">
                                <span>Gi·∫£m gi√°:</span>
                                <span>- {discountAmount.toLocaleString()} ‚Ç´</span>
                            </div>
                        </div>

                        <div className="input-group payment-method">
                            <label>Ph∆∞∆°ng th·ª©c thanh to√°n</label>
                            <select>
                                <option>Ti·ªÅn m·∫∑t</option>
                                <option>Chuy·ªÉn kho·∫£n</option>
                                <option>Th·∫ª</option>
                            </select>
                        </div>
                        
                        <div className="total-price">
                            <strong>T·ªïng thanh to√°n: </strong>
                            <span className="text-final-total">
                                {total.toLocaleString()} ‚Ç´
                            </span>
                        </div>

                        <button className="confirm-btn">X√°c nh·∫≠n ƒë∆°n h√†ng</button>
                    </div>
                </section>

                {/* C·ªôt b√™n ph·∫£i: Danh s√°ch s·∫£n ph·∫©m */}
                <section className="order-right">
                    <div className="product-header">
                        <h2>Danh s√°ch s·∫£n ph·∫©m</h2>
                        <div className="type-product">
                            <label>Lo·∫°i: </label>
                            <select value={category} onChange={(e) => setCategory(e.target.value)}>
                                <option value="all">T·∫•t c·∫£</option>
                                <option value="do-uong">ƒê·ªì u·ªëng</option>
                                <option value="thuc-pham">Th·ª±c ph·∫©m</option>
                                <option value="gia-dung">Gia d·ª•ng</option>
                            </select>
                        </div>
                    </div>

                    <div className="product-grid">
                        {currentProducts.length > 0 ? (
                            currentProducts.map((p) => (
                                <div
                                    key={p.product_id}
                                    className="product-item"
                                    onClick={() => handleAddToCart(p)}
                                >
                                    <div className="product-name">{p.product_name}</div>
                                    <div className="product-price">
                                        {p.price.toLocaleString()} ‚Ç´ / {p.unit}
                                    </div>
                                </div>
                            ))
                        ) : (
                             <p className="no-result">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o.</p>
                        )}
                    </div>

                    <div className="pagination">
                        <button 
                            onClick={() => paginate(currentPage - 1)} 
                            disabled={currentPage === 1}
                        >
                            <span role="img" aria-label="previous">‚óÄÔ∏è</span> Tr∆∞·ªõc
                        </button>
                        <span>Trang {currentPage} / {totalPages}</span>
                        <button 
                            onClick={() => paginate(currentPage + 1)} 
                            disabled={currentPage === totalPages || totalPages === 0}
                        >
                            Sau <span role="img" aria-label="next">‚ñ∂Ô∏è</span>
                        </button>
                    </div>
                </section>
            </main>
        </div>
    );
}